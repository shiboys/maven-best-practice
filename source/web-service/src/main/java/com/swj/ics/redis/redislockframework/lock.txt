 /**
     * 获得 lock.
     * 实现思路: 主要是使用了redis 的setnx命令,缓存了锁.
     * reids缓存的key是锁的key,所有的共享, value是锁的到期时间(注意:这里把过期时间放在value了,没有时间上设置其超时时间)
     * 执行过程:
     * 1.通过setnx尝试设置某个key的值,成功(当前没有这个锁)则返回,成功获得锁
     * 2.锁已经存在则获取锁的到期时间,和当前时间比较,超时的话,则设置新的值
     *
     * @return true if lock is acquired, false acquire timeouted
     * @throws InterruptedException in case of thread interruption
     https://www.cnblogs.com/0201zcr/p/5942748.html
     */
    public synchronized boolean lock() throws InterruptedException {
        int timeout = timeoutMsecs;
        while (timeout >= 0) {
            long expires = System.currentTimeMillis() + expireMsecs + 1;
            String expiresStr = String.valueOf(expires); //锁到期时间
            if (this.setNX(lockKey, expiresStr)) {
                // lock acquired
                locked = true;
                return true;
            }

            String currentValueStr = this.get(lockKey); //redis里的时间
            if (currentValueStr != null && Long.parseLong(currentValueStr) < System.currentTimeMillis()) {
                //判断是否为空，不为空的情况下，如果被其他线程设置了值，则第二个条件判断是过不去的
                // lock is expired

                String oldValueStr = this.getSet(lockKey, expiresStr);
                //获取上一个锁到期时间，并设置现在的锁到期时间，
                //只有一个线程才能获取上一个线上的设置时间，因为jedis.getSet是同步的
                if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
                    //防止误删（覆盖，因为key是相同的）了他人的锁——这里达不到效果，这里值会被覆盖，但是因为什么相差了很少的时间，所以可以接受

                    //[分布式的情况下]:如过这个时候，多个线程恰好都到了这里，但是只有一个线程的设置值和当前值相同，他才有权利获取锁
                    // lock acquired
                    locked = true;
                    return true;
                }
            }
            timeout -= DEFAULT_ACQUIRY_RESOLUTION_MILLIS;

            /*
                延迟100 毫秒,  这里使用随机时间可能会好一点,可以防止饥饿进程的出现,即,当同时到达多个进程,
                只会有一个进程获得锁,其他的都用同样的频率进行尝试,后面有来了一些进行,也以同样的频率申请锁,这将可能导致前面来的锁得不到满足.
                使用随机的等待时间可以一定程度上保证公平性
             */
            Thread.sleep(DEFAULT_ACQUIRY_RESOLUTION_MILLIS);

        }
        return false;
    }
    
    
    http://blog.csdn.net/evankaka/article/details/70568951
       // 阻塞式获取锁的实现  
        protected boolean lock(boolean useTimeout, long time, TimeUnit unit, boolean interrupt) throws InterruptedException {  
            System.out.println("test1");  
            if (interrupt) {  
                checkInterruption();  
            }  
      
            System.out.println("test2");  
            long start = System.currentTimeMillis();  
            long timeout = unit.toMillis(time); // if !useTimeout, then it's useless  
      
            while (useTimeout ? isTimeout(start, timeout) : true) {  
                System.out.println("test3");  
                if (interrupt) {  
                    checkInterruption();  
                }  
      
                long lockExpireTime = System.currentTimeMillis() + lockExpires + 1;// 锁超时时间  
                String stringOfLockExpireTime = String.valueOf(lockExpireTime);  
      
                System.out.println("test4");  
                if (jedis.setnx(lockKey, stringOfLockExpireTime) == 1) { // 获取到锁  
                    System.out.println("test5");  
                    //成功获取到锁, 设置相关标识  
                    locked = true;  
                    setExclusiveOwnerThread(Thread.currentThread());  
                    return true;  
                }  
      
                System.out.println("test6");  
                String value = jedis.get(lockKey);  
                if (value != null && isTimeExpired(value)) { // lock is expired  
                    System.out.println("test7");  
                    // 假设多个线程(非单jvm)同时走到这里  
                    String oldValue = jedis.getSet(lockKey, stringOfLockExpireTime); //原子操作  
                    // 但是走到这里时每个线程拿到的oldValue肯定不可能一样(因为getset是原子性的)  
                    // 加入拿到的oldValue依然是expired的，那么就说明拿到锁了  
                    System.out.println("test8");  
                    if (oldValue != null && isTimeExpired(oldValue)) {  
                        System.out.println("test9");  
                        //成功获取到锁, 设置相关标识  
                        locked = true;  
                        setExclusiveOwnerThread(Thread.currentThread());  
                        return true;  
                    }  
                } else {  
                    // TODO lock is not expired, enter next loop retrying  
                }  
            }  
            System.out.println("test10");  
            return false;  
        }  
    https://www.cnblogs.com/0201zcr/p/5942748.html
public synchronized long lock(String lockKey, String threadName) {  
        LOG.info(threadName+"开始执行加锁");  
        while (true){ //循环获取锁  
            //锁时间  
            Long lock_timeout = currtTimeForRedis()+ LOCK_TIMEOUT +1;  
            if (redisTemplate.execute(new RedisCallback<Boolean>() {  
                @Override  
                public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {  
                    //定义序列化方式  
                    RedisSerializer<String> serializer = redisTemplate.getStringSerializer();  
                    byte[] value = serializer.serialize(lock_timeout.toString());  
                    boolean flag = redisConnection.setNX(lockKey.getBytes(), value);  
                    return flag;  
                }  
            })){  
                //如果加锁成功  
                LOG.info(threadName +"加锁成功 ++++ 111111");  
                //设置超时时间，释放内存  
                redisTemplate.expire(lockKey, LOCK_TIMEOUT, TimeUnit.MILLISECONDS);  
                return lock_timeout;  
            }else {  
                //获取redis里面的时间  
                String result = redisTemplate.opsForValue().get(lockKey);  
                Long currt_lock_timeout_str = result==null?null:Long.parseLong(result);  
                //锁已经失效  
                if (currt_lock_timeout_str != null && currt_lock_timeout_str < System.currentTimeMillis()){  
                    //判断是否为空，不为空时，说明已经失效，如果被其他线程设置了值，则第二个条件判断无法执行  
                    //获取上一个锁到期时间，并设置现在的锁到期时间  
                    Long old_lock_timeout_Str = Long.valueOf(redisTemplate.opsForValue().getAndSet(lockKey, lock_timeout.toString()));  
                    if (old_lock_timeout_Str != null && old_lock_timeout_Str.equals(currt_lock_timeout_str)){  
                        //多线程运行时，多个线程签好都到了这里，但只有一个线程的设置值和当前值相同，它才有权利获取锁  
                        LOG.info(threadName + "加锁成功 ++++ 22222");  
                        //设置超时间，释放内存  
                        redisTemplate.expire(lockKey, LOCK_TIMEOUT, TimeUnit.MILLISECONDS);  
  
                        //返回加锁时间  
                        return lock_timeout;  
                    }  
                }  
            }  
  
            try {  
                LOG.info(threadName +"等待加锁， 睡眠100毫秒");  
//                TimeUnit.MILLISECONDS.sleep(100);  
                TimeUnit.MILLISECONDS.sleep(200);  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            }  
        }  
    }  